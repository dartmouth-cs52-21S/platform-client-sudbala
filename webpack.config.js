const env = process.env.NODE_ENV || 'development';
// Set to 'production' or 'development' in env based on what you are doing. We are developing

const ESLintPlugin = require('eslint-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const autoprefixer = require('autoprefixer');
const postcssPresets = require('postcss-preset-env');
// loaders for webpack

const finalCSSLoader = (env === 'production') ? MiniCssExtractPlugin.loader : { loader: 'style-loader' };

module.exports = {
  mode: env,
  output: { publicPath: '/' },
  entry: ['./src'], // where our app lives!
  devtool: 'source-map', // enables debugging with source in chrome devtools (wait so this does use a browser? i confused)
  module: {
    rules: [
      // {
      //   test: /\.svg/,
      //   use: {
      //     loader: 'svg-url-loader',
      //     options: {
      //       // Images larger than 10 KB won’t be inlined
      //       limit: 10 * 1024,
      //       // Remove quotes around the encoded URL –
      //       // they’re rarely useful
      //       noquotes: true,
      //     },
      //   },
      // },
      // {
      //   test: /\.(png|jpg|gif)$/i,
      //   use: [
      //     {
      //       loader: 'url-loader',
      //       options: {
      //         limit: 8192,
      //       },
      //     },
      //   ],
      // },
      {
        // Kinda reminds me of firebase and firestore ngl
        test: /\.js$/,
        exclude: /node_modules/,
        use: [ // Configuring babel for the particulars of what feature set of js we want. Allows us to run latest js features while generating js compatabile with older broswers
          { loader: 'babel-loader' },
        ],
      },
      {
        test: /\.s?css/,
        use: [
          finalCSSLoader,
          {
            loader: 'css-loader',
            options: {
              sourceMap: true,
            },
          },
          /* !! merge in between css-loader and sass-loader objects !! */
          {
            loader: 'postcss-loader',
            ident: 'postcss',
            options: {
              sourceMap: true,
              postcssOptions: {
                plugins: [
                  autoprefixer(),
                  postcssPresets({ browsers: 'last 2 versions' }),
                ],
              },
            },
          },
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true,
            },
          },
        ],
      },
      {
        test: /\.(jpe?g|png|gif|svg)$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              useRelativePath: true,
              name: '[name].[ext]',
            },
          },
        ],
      },
      // {
      //   test: /\.(gif|png|jpe?g|svg)$/i,
      //   use: [
      //     'file-loader',
      //     {
      //       loader: 'image-webpack-loader',
      //       options: {
      //         bypassOnDebug: true, // webpack@1.x
      //         disable: true, // webpack@2.x and newer
      //       },
      //     },
      //   ],
      // },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css',
    }),
    // Tells webpack we want it to know that we have a src/index.html file and want it to be availale as index.html -- hmm interesting
    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: './index.html',
    }),
    // ESLint with webpack
    new ESLintPlugin({}),
  ],
  devServer: {
    hot: true,
    historyApiFallback: true,
  },
};

// All this says is that we want to look in src for js files and eexclude the node_modile js files.
// Webpack assumes other things about project - in particular it will package up into directory called dist.
// src is all the source html, js, css, scss files for the app
// dist is the autogenerated directory where webpack will do the bundling up of files
